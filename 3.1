{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMzJHjyey5vmvl/gow2hL1p",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EvansRojas/Clase-Inteligencia-Artificial/blob/main/3.1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GKwSgLaCQ4t3"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Manejo de Datos Categoricos\n",
        "##27/02/25\n",
        "\n",
        "\n",
        "Dummies es una variable ficticia (tr)\n",
        "\n",
        "Get dummmies lo hacen inmadiatamente\n",
        "\n"
      ],
      "metadata": {
        "id": "LZNvWrQ_Q6XT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Define the number of rows in the dataset\n",
        "n_rows = 100\n",
        "\n",
        "# Generate random data for each column\n",
        "ids = np.arange(1, n_rows + 1)\n",
        "cities = np.random.choice(['Madrid', 'Barcelona', 'Valencia', 'Sevilla', 'Zaragoza'], size=n_rows)\n",
        "education_levels = np.random.choice(['High School', 'Bachelor', 'Master', 'PhD'], size=n_rows)\n",
        "genders = np.random.choice(['Male', 'Female', 'Other'], size=n_rows)\n",
        "\n",
        "# Create the DataFrame\n",
        "df = pd.DataFrame({'id': ids, 'ciudad': cities, 'educacion': education_levels, 'genero': genders})\n",
        "\n",
        "# Display the first few rows of the dataset\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "59pFwUoPVgu3",
        "outputId": "3fd89304-8384-4df6-cfe2-c793cc548585"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   id    ciudad    educacion  genero\n",
            "0   1  Zaragoza  High School  Female\n",
            "1   2   Sevilla          PhD   Other\n",
            "2   3   Sevilla  High School    Male\n",
            "3   4  Valencia     Bachelor    Male\n",
            "4   5    Madrid     Bachelor   Other\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Get dummies es un metodo de pandas. Más bien es pandas."
      ],
      "metadata": {
        "id": "X_AYq41LWkng"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "El OneHotEncoder se utiliza en el preprocesamiento de datos, especialmente cuando se trabaja con variables categóricas, para convertir esas variables en una forma que los algoritmos de aprendizaje automático puedan entender.\n",
        "\n",
        "En términos sencillos, OneHotEncoder transforma las categorías de una variable en una representación binaria (matriz de ceros y unos). Cada categoría se convierte en una columna diferente, y en cada fila, se coloca un 1 en la columna correspondiente a la categoría de esa fila, mientras que las demás columnas tienen un 0.\n",
        "\n",
        "¿Cómo se determina el número de columnas?\n",
        "Si tienes una variable con n categorías únicas, el OneHotEncoder generará n columnas. Cada columna corresponderá a una de las categorías posibles.\n",
        "\n",
        "Ejemplo:\n",
        "Supongamos que tienes una variable categórica con las siguientes categorías:\n",
        "\n",
        "[\"Rojo\", \"Verde\", \"Azul\", \"Amarillo\"]."
      ],
      "metadata": {
        "id": "-WECRZdiXbfF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "# Crear un DataFrame de ejemplo\n",
        "data = {'ID': np.arange(20),\n",
        "        'CIUDAD': np.random.choice(['Madrid', 'Barcelona', 'Valencia'], 20),\n",
        "        'EDUCACION': np.random.choice(['Bachillerato', 'Universidad', 'FP'], 20),\n",
        "        'GENERO': np.random.choice(['Hombre', 'Mujer'], 20)}\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Crear el OneHotEncoder\n",
        "encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
        "\n",
        "# Ajustar y transformar los datos categóricos\n",
        "encoded_data = encoder.fit_transform(df[['CIUDAD', 'EDUCACION', 'GENERO']])\n",
        "\n",
        "# Crear un nuevo DataFrame con las columnas codificadas\n",
        "encoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out(['CIUDAD', 'EDUCACION', 'GENERO']))\n",
        "\n",
        "# Concatenar el DataFrame original con el DataFrame codificado\n",
        "final_df = pd.concat([df[['ID']], encoded_df], axis=1)\n",
        "\n",
        "# Mostrar el DataFrame resultante (las primeras 5 filas)\n",
        "print(final_df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eblYrDqbYTX1",
        "outputId": "0fe021f2-0a41-4c3f-9976-d63a5832f60a"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    ID  CIUDAD_Barcelona  CIUDAD_Madrid  CIUDAD_Valencia  \\\n",
            "0    0               0.0            0.0              1.0   \n",
            "1    1               0.0            0.0              1.0   \n",
            "2    2               0.0            1.0              0.0   \n",
            "3    3               0.0            1.0              0.0   \n",
            "4    4               0.0            0.0              1.0   \n",
            "5    5               0.0            0.0              1.0   \n",
            "6    6               0.0            1.0              0.0   \n",
            "7    7               0.0            1.0              0.0   \n",
            "8    8               1.0            0.0              0.0   \n",
            "9    9               0.0            0.0              1.0   \n",
            "10  10               1.0            0.0              0.0   \n",
            "11  11               0.0            0.0              1.0   \n",
            "12  12               0.0            1.0              0.0   \n",
            "13  13               0.0            1.0              0.0   \n",
            "14  14               0.0            0.0              1.0   \n",
            "15  15               1.0            0.0              0.0   \n",
            "16  16               0.0            1.0              0.0   \n",
            "17  17               0.0            0.0              1.0   \n",
            "18  18               1.0            0.0              0.0   \n",
            "19  19               0.0            1.0              0.0   \n",
            "\n",
            "    EDUCACION_Bachillerato  EDUCACION_FP  EDUCACION_Universidad  \\\n",
            "0                      0.0           0.0                    1.0   \n",
            "1                      1.0           0.0                    0.0   \n",
            "2                      0.0           1.0                    0.0   \n",
            "3                      0.0           0.0                    1.0   \n",
            "4                      0.0           1.0                    0.0   \n",
            "5                      0.0           1.0                    0.0   \n",
            "6                      0.0           0.0                    1.0   \n",
            "7                      1.0           0.0                    0.0   \n",
            "8                      0.0           1.0                    0.0   \n",
            "9                      0.0           0.0                    1.0   \n",
            "10                     0.0           0.0                    1.0   \n",
            "11                     0.0           0.0                    1.0   \n",
            "12                     0.0           0.0                    1.0   \n",
            "13                     0.0           1.0                    0.0   \n",
            "14                     1.0           0.0                    0.0   \n",
            "15                     0.0           0.0                    1.0   \n",
            "16                     0.0           1.0                    0.0   \n",
            "17                     0.0           0.0                    1.0   \n",
            "18                     1.0           0.0                    0.0   \n",
            "19                     1.0           0.0                    0.0   \n",
            "\n",
            "    GENERO_Hombre  GENERO_Mujer  \n",
            "0             0.0           1.0  \n",
            "1             0.0           1.0  \n",
            "2             0.0           1.0  \n",
            "3             1.0           0.0  \n",
            "4             0.0           1.0  \n",
            "5             1.0           0.0  \n",
            "6             0.0           1.0  \n",
            "7             0.0           1.0  \n",
            "8             1.0           0.0  \n",
            "9             1.0           0.0  \n",
            "10            0.0           1.0  \n",
            "11            1.0           0.0  \n",
            "12            0.0           1.0  \n",
            "13            1.0           0.0  \n",
            "14            0.0           1.0  \n",
            "15            1.0           0.0  \n",
            "16            0.0           1.0  \n",
            "17            0.0           1.0  \n",
            "18            1.0           0.0  \n",
            "19            1.0           0.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Define the number of rows in the dataset\n",
        "n_rows = 100\n",
        "\n",
        "# Generate random data for each column\n",
        "ids = np.arange(1, n_rows + 1)\n",
        "cities = np.random.choice(['Madrid', 'Barcelona', 'Valencia', 'Sevilla', 'Zaragoza'], size=n_rows)\n",
        "education_levels = np.random.choice(['High School', 'Bachelor', 'Master', 'PhD'], size=n_rows)\n",
        "genders = np.random.choice(['Male', 'Female', 'Other'], size=n_rows)\n",
        "\n",
        "# Create the DataFrame\n",
        "df = pd.DataFrame({'id': ids, 'ciudad': cities, 'educacion': education_levels, 'genero': genders})\n",
        "\n",
        "# Display the first few rows of the dataset\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0IeMh5XvZ4Pt",
        "outputId": "16bac91a-2aff-4d69-cf7b-b1822f4032f4"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   id     ciudad    educacion  genero\n",
            "0   1     Madrid     Bachelor   Other\n",
            "1   2  Barcelona          PhD  Female\n",
            "2   3    Sevilla  High School    Male\n",
            "3   4   Valencia     Bachelor    Male\n",
            "4   5   Zaragoza       Master   Other\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfc=df.join(encoded_df)\n",
        "dfc"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "3XzgwiTlaA2T",
        "outputId": "e582a900-61a7-4fe6-b85f-8ddf8adbc9b1"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     id     ciudad    educacion  genero  CIUDAD_Barcelona  CIUDAD_Madrid  \\\n",
              "0     1     Madrid     Bachelor   Other               0.0            0.0   \n",
              "1     2  Barcelona          PhD  Female               0.0            0.0   \n",
              "2     3    Sevilla  High School    Male               0.0            1.0   \n",
              "3     4   Valencia     Bachelor    Male               0.0            1.0   \n",
              "4     5   Zaragoza       Master   Other               0.0            0.0   \n",
              "..  ...        ...          ...     ...               ...            ...   \n",
              "95   96     Madrid       Master    Male               NaN            NaN   \n",
              "96   97    Sevilla       Master   Other               NaN            NaN   \n",
              "97   98     Madrid  High School    Male               NaN            NaN   \n",
              "98   99    Sevilla       Master    Male               NaN            NaN   \n",
              "99  100     Madrid          PhD   Other               NaN            NaN   \n",
              "\n",
              "    CIUDAD_Valencia  EDUCACION_Bachillerato  EDUCACION_FP  \\\n",
              "0               1.0                     0.0           0.0   \n",
              "1               1.0                     1.0           0.0   \n",
              "2               0.0                     0.0           1.0   \n",
              "3               0.0                     0.0           0.0   \n",
              "4               1.0                     0.0           1.0   \n",
              "..              ...                     ...           ...   \n",
              "95              NaN                     NaN           NaN   \n",
              "96              NaN                     NaN           NaN   \n",
              "97              NaN                     NaN           NaN   \n",
              "98              NaN                     NaN           NaN   \n",
              "99              NaN                     NaN           NaN   \n",
              "\n",
              "    EDUCACION_Universidad  GENERO_Hombre  GENERO_Mujer  \n",
              "0                     1.0            0.0           1.0  \n",
              "1                     0.0            0.0           1.0  \n",
              "2                     0.0            0.0           1.0  \n",
              "3                     1.0            1.0           0.0  \n",
              "4                     0.0            0.0           1.0  \n",
              "..                    ...            ...           ...  \n",
              "95                    NaN            NaN           NaN  \n",
              "96                    NaN            NaN           NaN  \n",
              "97                    NaN            NaN           NaN  \n",
              "98                    NaN            NaN           NaN  \n",
              "99                    NaN            NaN           NaN  \n",
              "\n",
              "[100 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6ddbea2c-1bc7-4126-9a19-b484789ced75\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>ciudad</th>\n",
              "      <th>educacion</th>\n",
              "      <th>genero</th>\n",
              "      <th>CIUDAD_Barcelona</th>\n",
              "      <th>CIUDAD_Madrid</th>\n",
              "      <th>CIUDAD_Valencia</th>\n",
              "      <th>EDUCACION_Bachillerato</th>\n",
              "      <th>EDUCACION_FP</th>\n",
              "      <th>EDUCACION_Universidad</th>\n",
              "      <th>GENERO_Hombre</th>\n",
              "      <th>GENERO_Mujer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Madrid</td>\n",
              "      <td>Bachelor</td>\n",
              "      <td>Other</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>PhD</td>\n",
              "      <td>Female</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Sevilla</td>\n",
              "      <td>High School</td>\n",
              "      <td>Male</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Valencia</td>\n",
              "      <td>Bachelor</td>\n",
              "      <td>Male</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Zaragoza</td>\n",
              "      <td>Master</td>\n",
              "      <td>Other</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>96</td>\n",
              "      <td>Madrid</td>\n",
              "      <td>Master</td>\n",
              "      <td>Male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>97</td>\n",
              "      <td>Sevilla</td>\n",
              "      <td>Master</td>\n",
              "      <td>Other</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>98</td>\n",
              "      <td>Madrid</td>\n",
              "      <td>High School</td>\n",
              "      <td>Male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>99</td>\n",
              "      <td>Sevilla</td>\n",
              "      <td>Master</td>\n",
              "      <td>Male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>100</td>\n",
              "      <td>Madrid</td>\n",
              "      <td>PhD</td>\n",
              "      <td>Other</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ddbea2c-1bc7-4126-9a19-b484789ced75')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6ddbea2c-1bc7-4126-9a19-b484789ced75 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6ddbea2c-1bc7-4126-9a19-b484789ced75');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a103bfe6-ffb6-406c-b0cf-b295f5016f64\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a103bfe6-ffb6-406c-b0cf-b295f5016f64')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a103bfe6-ffb6-406c-b0cf-b295f5016f64 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ded34bee-7333-425b-89ed-36fc661cacde\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dfc')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ded34bee-7333-425b-89ed-36fc661cacde button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dfc');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfc",
              "summary": "{\n  \"name\": \"dfc\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 1,\n        \"max\": 100,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          84,\n          54,\n          71\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ciudad\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Barcelona\",\n          \"Zaragoza\",\n          \"Sevilla\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"educacion\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"PhD\",\n          \"Master\",\n          \"Bachelor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genero\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Other\",\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CIUDAD_Barcelona\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.41039134083406165,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CIUDAD_Madrid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5026246899500346,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CIUDAD_Valencia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5026246899500346,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDUCACION_Bachillerato\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4442616583193193,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDUCACION_FP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47016234598162715,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDUCACION_Universidad\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5104177855340405,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GENERO_Hombre\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5104177855340405,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GENERO_Mujer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5104177855340405,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1- sklearn\n",
        "\n",
        "2- Importar\n",
        "\n",
        "3- Crear modelo\n",
        "\n",
        "4- Fill -> Entrenar Modelo"
      ],
      "metadata": {
        "id": "4HNXTX60Yn-9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "{ = Diccionario\n",
        "\n",
        "( = tupla\n",
        "\n",
        "[( = arreglo"
      ],
      "metadata": {
        "id": "pLxy_w_jbfgE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qcVW8-4Fb3Ca",
        "outputId": "64b91544-c7ee-4488-c86e-dbb68c60fa79"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 100 entries, 0 to 99\n",
            "Data columns (total 4 columns):\n",
            " #   Column     Non-Null Count  Dtype \n",
            "---  ------     --------------  ----- \n",
            " 0   id         100 non-null    int64 \n",
            " 1   ciudad     100 non-null    object\n",
            " 2   educacion  100 non-null    object\n",
            " 3   genero     100 non-null    object\n",
            "dtypes: int64(1), object(3)\n",
            "memory usage: 3.3+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Para mapear diccionarios usamos las funciones lambda,"
      ],
      "metadata": {
        "id": "us6OAHnecJga"
      }
    }
  ]
}